{
  "name": "gulp-inject",
  "version": "0.4.1",
  "description": "A javascript, stylesheet and webcomponent injection plugin for Gulp, i.e. inject file references into your index.html",
  "keywords": [
    "gulpplugin",
    "inject",
    "stylesheets",
    "webcomponents",
    "scripts",
    "index"
  ],
  "homepage": "https://github.com/klei/gulp-inject",
  "bugs": {
    "url": "https://github.com/klei/gulp-inject/issues"
  },
  "author": {
    "name": "Joakim Bengtson",
    "email": "joakim@klei.se",
    "url": "http://joakim.beng.se"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/klei/gulp-inject.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "dependencies": {
    "gulp-util": "~2.2.0",
    "event-stream": "~3.1.0"
  },
  "devDependencies": {
    "mocha": "~1.17.0",
    "should": "~2.1.0"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-inject [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> A stylesheet, javascript and webcomponent reference injection plugin for [gulp](https://github.com/wearefractal/gulp). No more manual editing of your index.html!\n\n## Installation\n\nFirst, install `gulp-inject` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-inject\n```\n\n## Basic usage\n\nIn your `gulpfile.js`:\n\n### Mode 1: Given a Vinyl File Stream\n\n**Note:** New from `v.0.3`. Here you pipe `inject` through *where* to inject.\n\n```javascript\nvar inject = require(\"gulp-inject\");\n\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src([\"./src/*.js\", \"./src/*.css\"], {read: false}))) // Not necessary to read the files (will speed up things), we're only after their paths\n  .pipe(gulp.dest(\"./dist\"));\n```\n\n### Mode 2: Given a path to html template\n\n**Note:** Old behavior. Here you pipe `inject` through *what* to inject.\n\n```javascript\nvar inject = require(\"gulp-inject\");\n\ngulp.src([\"./src/*.js\", \"./src/*.css\"], {read: false}) // Not necessary to read the files (will speed up things), we're only after their paths\n\t.pipe(inject(\"path/to/your/index.html\"))\n\t.pipe(gulp.dest(\"./dist\"));\n```\n\n### Template contents (regardless of mode above)\n\nAdd injection tags to your `index.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:html -->\n  <!-- any *.html files among your sources will go here as: <link rel=\"import\" href=\"FILE\"> -->\n  <!-- endinject -->\n  <!-- inject:css -->\n  <!-- any *.css files among your sources will go here as: <link rel=\"stylesheet\" href=\"FILE\"> -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <!-- any *.js files among your sources will go here as: <script src=\"FILE\"></script> -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n## More examples\n\n### Injecting files from multiple streams\n\nThis example demonstrates how to inject files from multiple different streams into the same injection placeholder.\n\nInstall [`event-stream`](https://www.npmjs.org/package/event-stream) with: `npm install --save-dev event-stream` and use its [`merge`](https://github.com/dominictarr/event-stream#merge-stream1streamn) function.\n\n**Code:**\n\n```javascript\nvar es = require('event-stream'),\n    inject = require('gulp-inject');\n\n// Concatenate vendor scripts\nvar vendorStream = gulp.src(['./src/vendors/*.js'])\n  .pipe(concat('vendors.js'))\n  .pipe(gulp.dest('./dist'));\n\n// Concatenate AND minify app sources\nvar appStream = gulp.src(['./src/app/*.js'])\n  .pipe(concat('app.js'))\n  .pipe(uglify())\n  .pipe(gulp.dest('./dist'));\n\ngulp.src('./src/index.html')\n  .pipe(inject(es.merge(vendorStream, appStream)))\n  .pipe(gulp.dest('./dist'));\n```\n\n### Injecting some files into `<head>` and some into `<body>`\n\nUse `gulp-inject`'s `starttag` option.\n\n**Code:**\n\n```javascript\nvar inject = require('gulp-inject');\n\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src('./src/importantFile.js', {read: false}), {starttag: '<!-- inject:head:{{ext}} -->'}))\n  .pipe(inject(gulp.src(['./src/*.js', '!./src/importantFile.js'], {read: false})))\n  .pipe(gulp.dest('./dist'));\n```\n\nAnd in your `./src/index.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:head:js -->\n  <!-- only importantFile.js will be injected here -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <!-- the rest of the *.js files will be injected here -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n### Injecting all files for development\n\nIf you use [Bower](http://bower.io/) for frontend dependencies I recommend using [`gulp-bower-files`](https://www.npmjs.org/package/gulp-bower-files) and injecting them as well.\n\n**Code:**\n\n```javascript\nvar bowerFiles = require('gulp-bower-files'),\n    inject = require('gulp-inject'),\n    stylus = require('gulp-stylus'),\n    es = require('event-stream');\n\nvar cssFiles = gulp.src('./src/**/*.styl')\n  .pipe(stylus())\n  .pipe(gulp.dest('./build'));\n\ngulp.src('./src/index.html')\n  .pipe(inject(es.merge(\n    bowerFiles({read: false}),\n    cssFiles,\n    gulp.src('./src/app/**/*.js', {read: false})\n  )))\n  .pipe(gulp.dest('./build'));\n```\n\n**Note** remember to mount `./bower_components`, `./build` and `./src/app` as static resources in your server to make this work.\n\n### Injecting into a json-file\n\nYou can customize `gulp-inject` further by using the `transform` function option, e.g. by injecting files into a json-file.\n\n**Code:**\n\n```javascript\ngulp.src('./files.json')\n  .pipe(inject(gulp.src(['./src/*.js', './src/*.css', './src/*.html'], {read: false}), {\n    starttag: '\"{{ext}}\": [',\n    endtag: ']',\n    transform: function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\nInitial contents of `files.json`:\n\n```json\n{\n  \"js\": [\n  ],\n  \"css\": [\n  ],\n  \"html\": [\n  ]\n}\n```\n\n### Injecting dist files into bower.json's main section\n\n**Code:**\n\n```javascript\ngulp.src('./bower.json')\n  .pipe(inject(gulp.src(['./dist/app.min.js', './dist/app.min.css'], {read: false}), {\n    starttag: '\"main\": [',\n    endtag: ']',\n    function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\n### Injecting all javascript files into a karma config file\n\n**Code:**\n\n```javascript\ngulp.src('./karma.conf.js')\n  .pipe(inject(gulp.src(['./src/**/*.js'], {read: false}), {\n    starttag: 'files: [',\n    endtag: ']',\n    function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\n## API\n\n### inject(fileOrStream, options)\n\n#### fileOrStream\nType: `Stream` or `String`\n\n**If `Stream`**\n\nSince `v.0.3` you can provide a Vinyl File Stream as input to `inject`, see Mode 1 in the example above.\n\n**If `String`**\n\nCan also be a path to the template file (where your injection tags are). Is also used as filename for the plugin's output file.\n\n#### options.templateString\nType: `String`\n\nDefault: `NULL`\n\n\nIs used as template instead of the contents of given `filename`. (Only used if `fileOrStream` is a `String`)\n\n#### options.ignorePath\nType: `String` or `Array`\n\nDefault: `NULL`\n\n\nA path or paths that should be removed from each injected file path.\n\n#### options.addPrefix\nType: `String`\n\nDefault: `NULL`\n\n\nA path that should be prefixed to each injected file path.\n\n#### options.addRootSlash\nType: `Boolean`\n\nDefault: `true`\n\n\nThe root slash is automatically added at the beginning of the path ('/').\n\n#### options.starttag\nType: `String`\n\nDefault: `<!-- inject:{{ext}} -->`\n\n\nSet the start tag that the injector is looking for. `{{ext}}` is replaced with file extension name, e.g. \"css\", \"js\" or \"html\".\n\n#### options.endtag\nType: `String`\n\nDefault: `<!-- endinject -->`\n\n\nSet the end tag that the injector is looking for. `{{ext}}` is replaced with file extension name, e.g. \"css\", \"js\" or \"html\".\n\n#### options.transform\nType: `Function(filepath, file, index, length)`\n\nParams:\n  - `filepath` - The \"unixified\" path to the file with any `ignorePath`'s removed\n  - `file` - The [File object](https://github.com/wearefractal/vinyl) given from `gulp.src`\n  - `index` (0-based file index)\n  - `length` (total number of files to inject)\n\nDefault: a function that returns:\n\n* For css files: `<link rel=\"stylesheet\" href=\"<filename>.css\">`\n* For js files: `<script src=\"<filename>.js\"></script>`\n* For html files: `<link rel=\"import\" href=\"<filename>.html\">`\n\n\nUsed to generate the content to inject for each file.\n\n#### options.sort\nType: `Function(a, b)`\n\nParams: `a`, `b` (is used as `compareFunction` for [Array.prototype.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort))\n\nDefault: `NULL`\n\n\nIf set the given function is used as the compareFunction for the array sort function, to sort the source files by.\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-inject\n[npm-image]: https://badge.fury.io/js/gulp-inject.png\n\n[travis-url]: http://travis-ci.org/klei/gulp-inject\n[travis-image]: https://secure.travis-ci.org/klei/gulp-inject.png?branch=master\n\n[depstat-url]: https://david-dm.org/klei/gulp-inject\n[depstat-image]: https://david-dm.org/klei/gulp-inject.png\n",
  "readmeFilename": "README.md",
  "_id": "gulp-inject@0.4.1",
  "_from": "gulp-inject@~0.4.1"
}
